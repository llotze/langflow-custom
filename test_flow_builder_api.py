#!/usr/bin/env python3
"""
Test script for Flow Builder API with Gemini
"""

import sys
import os
import asyncio
from dotenv import load_dotenv

# Add the project directory to the path
project_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, project_dir)

# Load environment variables
load_dotenv()

async def test_flow_builder():
    """Test the flow builder agent"""
    try:
        from flow_builder_agent import SimpleFlowBuilderAgent
        
        print("=" * 60)
        print("Testing Flow Builder with Gemini API")
        print("=" * 60)
        
        # Check API key
        api_key = os.getenv("GEMINI_API_KEY")
        if not api_key:
            print("ERROR: GEMINI_API_KEY not found in environment")
            return
        
        print(f"✓ API Key found: {api_key[:10]}...")
        
        # Initialize agent
        print("\nInitializing SimpleFlowBuilderAgent...")
        agent = SimpleFlowBuilderAgent()
        print("✓ Agent initialized")
        
        # Test prompt
        test_prompt = "Create a simple chatbot flow"
        print(f"\nTest prompt: '{test_prompt}'")
        
        # Build flow
        print("\nBuilding flow...")
        flow_data = await agent.build_flow_async(test_prompt)
        
        print("\n" + "=" * 60)
        print("RESULT:")
        print("=" * 60)
          # Check if we got a real flow or fallback
        if flow_data.get("data", {}).get("nodes"):
            nodes = flow_data["data"]["nodes"]
            print(f"\n✓ Flow generated with {len(nodes)} nodes:")
            
            for node in nodes:
                node_id = node.get("id", "unknown")
                node_type = node.get("data", {}).get("type", "unknown")
                has_template = "template" in node.get("data", {}).get("node", {})
                display_name = node.get("data", {}).get("node", {}).get("display_name", "N/A")
                print(f"  - {node_id} ({node_type}) - {display_name} - Template: {has_template}")
            
            # Check if it's the fallback flow
            node_types = [n.get("data", {}).get("type") for n in nodes]
            is_fallback = set(node_types) == {"ChatInput", "ChatOutput", "OpenAIModel"}
            
            if is_fallback:
                print("\n⚠ WARNING: This appears to be the fallback flow")
                print("The LLM generation may have failed")
            else:
                print("\n✓ SUCCESS: Custom flow generated by LLM")
                print(f"Node types: {node_types}")
        else:
            print("\n✗ ERROR: No nodes in flow data")
        
        print("\n" + "=" * 60)
        
    except Exception as e:
        print(f"\n✗ ERROR: {type(e).__name__}: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_flow_builder())
